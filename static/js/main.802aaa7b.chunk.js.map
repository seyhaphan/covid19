{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","confirmed","recovered","deaths","Axios","get","result","data","lastUpdate","this","setState","console","log","value","className","style","width","textAlign","Card","bg","text","Header","Body","Title","start","end","duration","separator","Text","Date","toDateString","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oWAMqBA,E,4MACnBC,MAAQ,CACNC,UAAW,GACXC,UAAW,GACXC,OAAQ,I,mMAGQ,oD,SACKC,IAAMC,IADX,qD,OACVC,E,SAC+CA,EAAOC,KAApDN,E,EAAAA,UAAWC,E,EAAAA,UAAWC,E,EAAAA,OAAQK,E,EAAAA,WAEtCC,KAAKC,SAAS,CACZT,YACAC,YACAC,SACAK,e,qIAIM,IAAD,EAC8CC,KAAKT,MAAlDC,EADD,EACCA,UAAWC,EADZ,EACYA,UAAWC,EADvB,EACuBA,OAAQK,EAD/B,EAC+BA,WAEtC,OADAG,QAAQC,IAAIJ,GACPP,EAAUY,MAKb,yBAAKC,UAAU,+DACb,wBAAIC,MAAO,CAAEC,MAAO,OAAQC,UAAW,WAAvC,oBACA,kBAACC,EAAA,EAAD,CAAMC,GAAG,UAAUC,KAAK,QAAQN,UAAU,aACxC,kBAACI,EAAA,EAAKG,OAAN,kBACA,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKK,MAAN,KACE,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKxB,EAAUY,MACfa,SAAU,IACVC,UAAU,OAGd,kBAACT,EAAA,EAAKU,KAAN,KACG,IAAIC,KAAKrB,GAAYsB,kBAK5B,kBAACZ,EAAA,EAAD,CAAMC,GAAG,UAAUC,KAAK,QAAQN,UAAU,aACxC,kBAACI,EAAA,EAAKG,OAAN,kBACA,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKK,MAAN,KACE,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKvB,EAAUW,MACfa,SAAU,IACVC,UAAU,OAGd,kBAACT,EAAA,EAAKU,KAAN,KACG,IAAIC,KAAKrB,GAAYsB,kBAK5B,kBAACZ,EAAA,EAAD,CAAMC,GAAG,SAASC,KAAK,QAAQN,UAAU,aACvC,kBAACI,EAAA,EAAKG,OAAN,eACA,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKK,MAAN,KACE,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKtB,EAAOU,MACZa,SAAU,IACVC,UAAU,OAGd,kBAACT,EAAA,EAAKU,KAAN,KACG,IAAIC,KAAKrB,GAAYsB,mBApDvB,iB,GAvBoBC,aCMbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.802aaa7b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Card } from 'react-bootstrap'\nimport './App.css'\nimport Axios from 'axios'\nimport CountUp from 'react-countup'\n\nexport default class App extends Component {\n  state = {\n    confirmed: {},\n    recovered: {},\n    deaths: {}\n  }\n  async componentWillMount() {\n    const baseUrl = 'https://covid19.mathdro.id/api/countries/cambodia';\n    const result = await Axios.get(baseUrl);\n    const { confirmed, recovered, deaths, lastUpdate } = result.data;\n\n    this.setState({\n      confirmed,\n      recovered,\n      deaths,\n      lastUpdate\n    });\n\n  }\n  render() {\n    const { confirmed, recovered, deaths, lastUpdate } = this.state;\n    console.log(lastUpdate);\n    if (!confirmed.value) {\n      return 'loading...'\n    }\n\n    return (\n      <div className='main container mt-4 d-flex flex-wrap justify-content-center'>\n        <h1 style={{ width: '100%', textAlign: 'center' }}>Cambodia covid19</h1>\n        <Card bg='primary' text='white' className=\"card-item\">\n          <Card.Header>Confirmed</Card.Header>\n          <Card.Body>\n            <Card.Title>\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                duration={2.5}\n                separator=','\n              />\n            </Card.Title>\n            <Card.Text>\n              {new Date(lastUpdate).toDateString()}\n            </Card.Text>\n          </Card.Body>\n        </Card>\n\n        <Card bg='warning' text='white' className=\"card-item\">\n          <Card.Header>Recovered</Card.Header>\n          <Card.Body>\n            <Card.Title>\n              <CountUp\n                start={0}\n                end={recovered.value}\n                duration={2.5}\n                separator=','\n              />\n            </Card.Title>\n            <Card.Text>\n              {new Date(lastUpdate).toDateString()}\n            </Card.Text>\n          </Card.Body>\n        </Card>\n\n        <Card bg='danger' text='white' className=\"card-item\">\n          <Card.Header>Deaths</Card.Header>\n          <Card.Body>\n            <Card.Title>\n              <CountUp\n                start={0}\n                end={deaths.value}\n                duration={2.5}\n                separator=','\n              />\n            </Card.Title>\n            <Card.Text>\n              {new Date(lastUpdate).toDateString()}\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}